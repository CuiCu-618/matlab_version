% PROGRAM p54    
% !-------------------------------------------------------------------------
% ! Program 5.4 General two- (plane strain) or three-dimensional analysis
% !             of elastic solids (optional gravity loading).
% !-------------------------------------------------------------------------
%% ---------------------------initialisation-------------------------------
fixed_freedoms = 0;
loaded_nodes = 3;
ndim = 2;
nip = 9;                        % number of integration points per element
nod = 9;
nodof = 2;
nprops = 3;
np_types = 1;
nr = 17;
nst = 3;                        % number of stress (strain) terms
nels = 6;
nn = 35;
penalty = 1e20;

ndof = nod*nodof;
element = "quadrilateral";

nf = zeros(nodof,nn);
points = zeros(nip,ndim);
g = zeros(ndof,1);
g_coord = zeros(ndim,nn);
fun = zeros(nod,1);             % shape functions
coord = zeros(nod,ndim);
jac = zeros(ndim,ndim);         % Jacobian matrix
g_num = zeros(nod,nels);
der = zeros(ndim,nod);          % shape function derivatives with respect to local coordinates
deriv = zeros(ndim,nod);        % shape function derivatives with respect to global coordinates
bee = zeros(nst,ndof);          % strain–displacement matrix
km = zeros(ndof,ndof);
eld = zeros(ndof,1);
weights = zeros(nip,1);         % weighting coefﬁcients
g_g = zeros(ndof,nels);
prop = zeros(nprops,np_types);
num = zeros(nod,1);
etype = zeros(nels,1);
gc = zeros(ndim,1);             % integrating point coordinates
dee = zeros(nst,nst);           % stress strain matrix
sigma = zeros(nst,1);           % stress terms

prop(:,:) = [1e6,0.3,0];
etype(:) = 1;
g_coord(:,:) = [0.0,0.0;1.5,0.0;3.0,0.0;4.5,0.0;6.0,0.0;0.0,-1.5;...
                1.5,-1.5;3.0,-1.5;4.5,-1.5;6.0,-1.5;0.0,-3.0;1.5,-3.0;...
                3.0,-3.0;4.5,-3.0;6.0,-3.0;0.0,-4.5;1.5,-4.5;3.0,-4.5;...
                4.5,-4.5;6.0,-4.5;0.0,-6.0;1.5,-6.0;3.0,-6.0;4.5,-6.0;...
                6.0,-6.0;0.0,-7.5;1.5,-7.5;3.0,-7.5;4.5,-7.5;6.0,-7.5;...
                0.0,-9.0;1.5,-9.0;3.0,-9.0;4.5,-9.0;6.0,-9.0]';
g_num(:,:) = [11,6,1,2,3,8,13,12,7;...
              21,16,11,12,13,18,23,22,17;...
              31,26,21,22,23,28,33,32,27;...
              13 ,8, 3, 4, 5,10,15,14, 9;...
              23,18,13,14,15,20,25,24,19;...
              33,28,23,24,25,30,35,34,29]';
nf(:,:) = 1;
k = [1,5,6,10,11,15,16,20,21,25,26,30,31,32,33,34,35];
nf(:,k) = [zeros(1,nr);1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0];
nf = formnf(nf);
neq = max(max(nf));
loads = zeros(neq+1,1);
gravlo = zeros(neq+1,1);        % loads generated by gravity
kdiag = zeros(neq,1);
%% !-------------loop the elements to find global arrays sizes-------------
for iel = 1:nels
    num = g_num(:,iel);
    g(:,1) = num_to_g(num,nf);
    g_g(:,iel) = g;
    kdiag = fkdiag(kdiag,g);
end
for i = 2:neq
    kdiag(i) = kdiag(i) + kdiag(i-1);
end
kv = zeros(kdiag(neq),1);
fprintf(" There are %d equations and the skyline storage is %d \n",...
                neq,kdiag(neq));
%% !---------------------element stiffness integration and assembly--------
[points,weights] = sample(element,points,weights);
for iel = 1:nels
    dee = deemat(dee,prop(1,etype(iel)),prop(2,etype(iel)));
    num(:,1) = g_num(:,iel);
    coord(:,:) = g_coord(:,num)';
    g(:,1) = g_g(:,iel);
    km(:,:) = 0;
    eld(:,:) = 0;
    for i = 1:nip
        fun(:) = shape_fun(fun,points,i);
        der(:) = shape_der(der,points,i);
        jac = der*coord;
        dete = det(jac);
        deriv = jac\der;
        bee = beemat(bee,deriv);
        km = km + bee'*dee*bee*dete*weights(i);
        eld(nodof:nodof:ndof) = eld(nodof:nodof:ndof) + fun(:)*dete*weights(i);
    end
    kv = fsparv(kv,km,g,kdiag);
    g(g==0) = neq+1;
    gravlo(g) = gravlo(g) - eld*prop(3,etype(iel));
end
k = [1,2,3];
nf(nf == 0) = neq+1;
loads(nf(:,k)) = [0,0,0;-0.5,-2,-0.5];
loads(neq+1) = 0;
if fixed_freedoms ~= 0
    node = zeros(fixed_freedoms,1);
    no = zeros(fixed_freedoms,1);
    sense = zeros(fixed_freedoms,1);
    value = zeros(fixed_freedoms,1);
    for i = 1:fixed_freedoms
        no(i) = nf(sense(i),node(i));
    end
    kv(kdiag(no)) = kv(kdiag(no)) + penalty;
    loads(no) = kv(kdiag(no)) .* value;
end
%% !----------------------equation solution ------------------------------- 
kv = sparin(kv,kdiag);
loads = spabac(kv,loads,kdiag);
if ndim == 3
    fprintf("  Node     x-disp         y-disp         z-disp\n")
else
    fprintf("  Node     x-disp         y-disp\n")
end
for k = 1:nn
    if nf(:,k) == 0
        nf(:,k) = neq+1;
        loads(nf(:,k)) = 0;
    end
    fprintf("   %2d   %13.4e  %13.4e\n",k,loads(nf(1,k)),loads(nf(2,k)));
end
%% !---------------------recover stresses at nip integrating points--------
nip = 9;
points = zeros(nip,ndim);
weights = zeros(nip,1);
[points,weights] = sample(element,points);
fprintf(" The integration point (nip= %d) stresses are:\n",nip)
if ndim == 3
    fprintf(" Element   x-coord      y-coord        z-coord        sig_r         sig_z        tau_rz      sig_t\n" )
else
    fprintf(" Element   x-coord      y-coord        sig_x         sig_y        tau_xy\n") 
end
for iel = 1:nels
    dee = deemat(dee,prop(1,etype(iel)),prop(2,etype(iel)));
    num(:,1) = g_num(:,iel);
    coord(:,:) = g_coord(:,num)';
    g(:,1) = g_g(:,iel);
    g(g==0) = neq+1;
    eld = loads(g);
    for i = 1:nip
        fun(:) = shape_fun(fun,points,i);
        der(:) = shape_der(der,points,i);
        gc = fun'*coord;
        jac = der*coord;
        dete = det(jac);
        deriv = jac\der;
        bee = beemat(bee,deriv);
        sigma = dee*bee*eld;
        fprintf("  %d   %13.4e %13.4e %13.4e %13.4e %13.4e\n",...
                iel,gc(1),gc(2),sigma(1),sigma(2),sigma(3))
    end
end






